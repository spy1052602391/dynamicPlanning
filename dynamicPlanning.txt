


//dp动态规划
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] p = new int[N+1];
        for(int i=1; i<N+1; i++)
            p[i] = sc.nextInt();
        long[][] dp = new long[N+1][M+1];
        //因为前i个数组成为0的方案都只有一种，那就是不加任何数
        for(int i=0; i<=N; i++)
            dp[i][0] = 1;
        //因为前0个数不能组成1~M
        for(int i=1; i<=M; i++)
            dp[0][i] = 0;
        for(int i=1; i<=N; i++){
            for(int j=1; j<=M; j++){    //dp[i][j] 表示前i个数里面能表示和为j的  元素排列方式的 个数
                if(p[i] > j){
                    //当前的数组p中的数   大于   j的时候，说明p中第i个元素  肯定不能和前面的数组成和为j的数
                    //所以直接用前i-1个元素和为j的个数就行了。
                    dp[i][j] = dp[i-1][j];
                }else {
                    //当前的数组p中的元素  小于等于 j的时候，说明p中的第i个元素  是可以和前面的元素相加组成j的
                    //比如j为8  当前元素为5   那么还差一个3， 就去前i-1个元素中 j=3 的值，取出这个次数，
                    //然后和本来前i-1个元素和为8的个数相加。就是新的前i项等于8的次数。
                    dp[i][j] = dp[i-1][j] + dp[i-1][j-p[i]];
                }
            }
        }
        //最终注意数组越界问题
        System.out.println(dp[N][M]);
    }
}
